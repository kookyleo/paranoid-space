// src/grammar/php.pest

// Make WHITESPACE non-silent
WHITESPACE = { " " | "\t" }
// Make NEWLINE non-silent
NEWLINE = { "\r\n" | "\n" | "\r" }

// PHP Tags
php_start_tag = { "<?php" | "<?=" }
php_end_tag = { "?>" | EOI }

// The main body of PHP code within tags
// Allow specific elements OR NEWLINE, repeated at least once.
php_script_body = { (php_comment | php_string | variable | php_code_char | NEWLINE)+ }

// PHP Comments (kept simple for now)
php_line_comment = { ("//" | "#") ~ (!NEWLINE ~ ANY)* }
php_block_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
php_comment = { php_line_comment | php_block_comment }

// Variables (simple example)
variable = { "$" ~ identifier }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// Strings
// Define atomic rules for quotes
SQ = _{ "'" }
DQ = _{ "\"" }

// Basic escape sequences
escape_sequence = { "\\" ~ ANY } // Simplistic, includes \\, \", etc.

// Content inside single quotes (no interpolation, limited escapes)
php_sq_normal_text = { (!"'" ~ ANY)+ } // Match chars that aren't '
php_sq_inner = _{ escape_sequence | php_sq_normal_text }
php_single_quoted_string = { SQ ~ php_sq_inner* ~ SQ }

// Content inside double quotes (allows interpolation and more escapes)
// Use php_code_char for non-special characters
php_dq_normal_text = { (!("\"" | "\\" | "$") ~ ANY)+ } // Match chars that aren't ", \, or start of var
php_dq_inner = _{ escape_sequence | variable | php_dq_normal_text }
php_double_quoted_string = { DQ ~ php_dq_inner* ~ DQ }

// Heredoc / Nowdoc
// Common end pattern: newline, identifier (matching the start), optional semicolon, followed by newline/EOI
// Make body optional to handle empty heredocs/nowdocs
heredoc = _{ heredoc_start ~ heredoc_body_content? ~ doc_end }
nowdoc = _{ nowdoc_start ~ nowdoc_body_content? ~ doc_end }

heredoc_start = @{ "<<<" ~ WHITESPACE? ~ PUSH(identifier) ~ NEWLINE }
nowdoc_start = @{ "<<<'" ~ WHITESPACE? ~ PUSH(identifier) ~ "'" ~ NEWLINE }

// End rule: Match newline, POP the identifier, optional ; and NEWLINE
doc_end = { NEWLINE ~ POP ~ (";" ~ NEWLINE)? }

// Content rules: Use negative lookahead for the end sequence based on PEEK
heredoc_end_lookahead = { NEWLINE ~ PEEK } // Lookahead for newline followed by the stack identifier
// Define specific rules for interpolation within heredoc
// heredoc_variable_braced = { "${" ~ expression ~ "}" } // Placeholder for braced expression
heredoc_plain_chunk = @{ (!heredoc_end_lookahead ~ !("$" ~ identifier) /* ~ !"${" */ ~ ANY)+ } // Match non-variable, non-end chars, keep internal whitespace

// Heredoc content is a sequence of plain text or variables
heredoc_body_content = _{ (variable /* | heredoc_variable_braced */ | heredoc_plain_chunk)* }

nowdoc_end_lookahead = { NEWLINE ~ PEEK }
// Nowdoc content doesn't interpolate, so it's simpler. Still needs to avoid the end sequence.
// Keep it atomic for now as it has no internal structure we need to parse separately.
nowdoc_body_content = @{ (!nowdoc_end_lookahead ~ ANY)* }

// General PHP String Rule
php_string = { php_single_quoted_string | php_double_quoted_string | heredoc | nowdoc }

// Character-level rule for general PHP code, excluding structure-defining elements
php_code_char = { !(php_end_tag | php_comment | php_string | "$" /* Start of var */ | "<" /* Start of tag? */ | "/" /* Start of comment? */ | "#" /* Start of comment? */ | "'" | "\"" | NEWLINE | WHITESPACE) ~ ANY }

// === Top Level Rules ===

// Represents a block of PHP code enclosed in tags
php_chunk = { php_start_tag ~ php_script_body? ~ php_end_tag }

// Represents a block of HTML content
html_chunk = { (!php_start_tag ~ ANY)+ }

// The overall program structure: zero or more HTML or PHP chunks
// This IS the entry point.
program = { SOI ~ (html_chunk | php_chunk)* ~ EOI }