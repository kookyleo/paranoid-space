WHITESPACE = { " " | "\t" | "\n" | "\r" }
NEWLINE = _{ "\n" | "\r" }

// Helper rule for sequences of hashes (not used directly in raw strings)
hashes = { "#"* }

// ==== Comments ====

line_comment = @{ "//" ~ !"/" ~ !"!" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }

line_outer_doc_comment = @{ "///" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }
line_outer_doc_comment_block = ${ line_outer_doc_comment+ }
line_inner_doc_comment = @{ "//!" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }
line_inner_doc_comment_block = ${ line_inner_doc_comment+ }

block_comment = ${ "/*" ~ block_comment_inner_chars ~ "*/" }
block_comment_inner_chars = @{ (!("*/") ~ ANY)* }

block_outer_doc_comment = ${ "/**" ~ block_doc_comment_inner_line* ~ block_doc_comment_last_line ~ "*/" }
block_inner_doc_comment = ${ "/*!" ~ block_doc_comment_inner_line* ~ block_doc_comment_last_line ~ "*/" }
block_doc_comment_inner_line = @{ (!("*/") ~ !NEWLINE ~ ANY)* ~ NEWLINE }
block_doc_comment_last_line = @{ (!("*/") ~ ANY)* }

comment = {
    line_outer_doc_comment_block
  | line_inner_doc_comment_block
  | line_comment
  | block_outer_doc_comment
  | block_inner_doc_comment
  | block_comment
}

// ==== Strings ====

// Normal string escape sequence, support Unicode and hexadecimal
string_escape = { "\\" ~ ( "\"" | "\\" | "n" | "r" | "t" | "0" | "x" ~ ASCII_HEX_DIGIT{2} | "u" ~ "{" ~ ASCII_HEX_DIGIT+ ~ "}" | "'" ) }

// Normal string inner content (escape or non-quote character)
string_inner = { (string_escape | (!"\"" ~ ANY))* }

string_literal = @{ "\"" ~ string_inner ~ "\"" }

// Byte string: b"..."
byte_string_escape = { "\\" ~ ( "\"" | "\\" | "n" | "r" | "t" | "0" | "x" ~ ASCII_HEX_DIGIT{2} | "'" ) }
byte_string_inner = { (byte_string_escape | (!"\"" ~ ANY))* }
byte_string = @{ "b" ~ "\"" ~ byte_string_inner ~ "\"" }

// Raw string, dynamic match any number of #
// Using PUSH/POP to ensure matching hash counts at start and end
raw_string = ${ 
    "r" ~ PUSH(hash_count) ~ "\"" ~ 
    raw_string_inner ~
    "\"" ~ POP 
}
hash_count = @{ "#"* }
raw_string_inner = @{ (!("\"" ~ PEEK) ~ ANY)* } // Match anything unless it's the closing quote + hashes

// Raw byte string: br#"..."#
raw_byte_string = ${ 
    "br" ~ PUSH(hash_count) ~ "\"" ~ 
    raw_byte_string_inner ~
    "\"" ~ POP 
}
raw_byte_string_inner = @{ (!("\"" ~ PEEK) ~ ANY)* } // Match anything unless it's the closing quote + hashes

// Total string rule
string = { 
    raw_byte_string
    | raw_string
    | byte_string
    | string_literal
    // | char_literal // TODO
}

// ==== Other code ====

// Other code characters that are not comments or strings
other_char = { !( "//" | "/*" | "\"" | "r#" | "r\"" | "br#" | "br\"" | "b\"" | "'" ) ~ ANY } 
other_code = { other_char+ }

// ==== Top level ====

program = { SOI ~ (comment | string | other_code)* ~ EOI }
